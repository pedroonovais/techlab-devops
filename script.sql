-- V1__create_table_task.sql
CREATE TABLE task
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title       VARCHAR(255),
    description VARCHAR(255),
    score       INTEGER                                 NOT NULL,
    status      INTEGER                                 NOT NULL,
    CONSTRAINT pk_task PRIMARY KEY (id)
);

-- V1__create_table_user.sql
CREATE TABLE techlabuser
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    email      VARCHAR(255),
    name       VARCHAR(255),
    avatar_url VARCHAR(255),
    password VARCHAR(255),
    CONSTRAINT pk_techlabuser PRIMARY KEY (id)
);

-- V1__create_tables.sql
CREATE TABLE task
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title       VARCHAR(255),
    description VARCHAR(255),
    score       INTEGER                                 NOT NULL,
    status      INTEGER                                 NOT NULL,
    CONSTRAINT pk_task PRIMARY KEY (id)
);

-- V1__init_schema.sql
CREATE TABLE IF NOT EXISTS users (
    id BIGSERIAL PRIMARY KEY,
    username VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    enabled BOOLEAN NOT NULL DEFAULT TRUE
);

-- V1__init_schema.sql
CREATE TABLE IF NOT EXISTS roles (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL
);

-- V1__init_schema.sql
CREATE TABLE IF NOT EXISTS user_roles (
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    role_id BIGINT NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);

-- V1__init_schema.sql
CREATE TABLE IF NOT EXISTS motos (
    id BIGSERIAL PRIMARY KEY,
    placa VARCHAR(20) UNIQUE NOT NULL,
    modelo VARCHAR(100) NOT NULL,
    ano INT,
    status VARCHAR(30) NOT NULL DEFAULT 'ATIVA'
);

-- V1__init_schema.sql
CREATE TABLE IF NOT EXISTS rfid_sensors (
    id BIGSERIAL PRIMARY KEY,
    epc VARCHAR(128) UNIQUE NOT NULL,
    ativo BOOLEAN NOT NULL DEFAULT TRUE,
    moto_id BIGINT REFERENCES motos(id) ON DELETE SET NULL
);

-- V1__init_schema.sql
CREATE TABLE IF NOT EXISTS antenna_situations (
    id BIGSERIAL PRIMARY KEY,
    antena_id VARCHAR(64) NOT NULL,
    localizacao VARCHAR(120),
    situacao VARCHAR(64) NOT NULL,
    data_registro TIMESTAMP NOT NULL DEFAULT NOW()
);

-- V2__create_table_patio.sql
CREATE TABLE patio (
    id BIGSERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL UNIQUE
);

-- V2__create_table_user.sql
CREATE TABLE epicuser
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name       VARCHAR(255),
    email      VARCHAR(255),
    avatar_url VARCHAR(255),
    CONSTRAINT pk_epicuser PRIMARY KEY (id)
);

-- V3__add_fk_task_user.sql
ALTER TABLE task
    ADD CONSTRAINT FK_TASK_ON_USER FOREIGN KEY (user_id) REFERENCES epicuser (id);

-- V3__create_table_iot.sql
create table iot (
    id           bigserial primary key,
    ativo        boolean not null,
    bateria      integer,
    coordenada_x varchar(255) not null,
    coordenada_y varchar(255) not null
);

-- V4__create_table_moto.sql
create table moto (
    id           bigserial primary key,
    modelo       varchar(255) not null,
    placa        varchar(255) not null unique,
    data_entrada timestamp not null,
    data_saida   timestamp
);

-- V5__create_table_moto.sql
CREATE TABLE moto(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    placa VARCHAR(20) NOT NULL,
    modelo VARCHAR(80) NOT NULL,
    ano INTEGER,
    status VARCHAR(30) NOT NULL
);

-- V6__create_table_rfid_sensor.sql
CREATE TABLE rfid_sensor(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codigo VARCHAR(80) NOT NULL,
    ativo BOOLEAN NOT NULL DEFAULT TRUE,
    moto_id BIGINT,
    CONSTRAINT fk_sensor_moto FOREIGN KEY (moto_id) REFERENCES moto(id)
);

-- V7__create_table_antenna_situation.sql
CREATE TABLE antenna_situation(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    antena_id VARCHAR(80) NOT NULL,
    localizacao VARCHAR(120),
    situacao VARCHAR(40) NOT NULL,
    data_registro TIMESTAMP
);